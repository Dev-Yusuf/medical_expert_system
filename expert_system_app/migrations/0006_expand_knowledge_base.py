# Generated by Django 5.0.2 on 2025-09-19 08:00

from django.db import migrations

# --- EXPANDED KNOWLEDGE BASE ---
NEW_DISEASES_DATA = {
    "Common Cold": {
        "description": "A mild viral infectious disease of the nose and throat.",
        "symptoms": {
            "Sore throat": 8,
            "Runny nose": 9,
            "Cough": 7,
            "Sneezing": 8,
            "Headache": 5,
            "Body Aches": 4, # Lower weight than flu
        },
        "treatments": [
            "Rest and stay hydrated.",
            "Over-the-counter medications like decongestants and pain relievers can help.",
            "Soothe a sore throat with gargling salt water."
        ]
    },
    "Influenza (Flu)": {
        "description": "A contagious respiratory illness caused by influenza viruses.",
        "symptoms": {
            "Fever": 9,
            "Cough": 8,
            "Sore throat": 7,
            "Runny nose": 6,
            "Muscle pain": 9, # Higher weight than cold
            "Body Aches": 9,   # Synonym for Muscle pain
            "Headache": 8,
            "Fatigue": 10,
        },
        "treatments": [
            "Antiviral drugs can be prescribed by a doctor.",
            "Get plenty of rest and drink lots of fluids.",
            "Over-the-counter pain relievers can help with symptoms."
        ]
    },
    "Gastroenteritis (Stomach Flu)": {
        "description": "An intestinal infection marked by watery diarrhea, abdominal cramps, nausea or vomiting, and sometimes fever.",
        "symptoms": {
            "Diarrhea": 10,
            "Vomiting": 9,
            "Nausea": 9,
            "Stomach pain": 8,
            "Fever": 6,
            "Headache": 5,
        },
        "treatments": [
            "Prevent dehydration by drinking plenty of liquids like water, broth, or rehydration solutions.",
            "Ease back into eating with bland foods like crackers, toast, and rice.",
            "Get plenty of rest."
        ]
    }
}

def populate_new_data(apps, schema_editor):
    Symptom = apps.get_model('expert_system_app', 'Symptom')
    Disease = apps.get_model('expert_system_app', 'Disease')
    DiseaseSymptom = apps.get_model('expert_system_app', 'DiseaseSymptom')
    Treatment = apps.get_model('expert_system_app', 'Treatment')

    for disease_name, data in NEW_DISEASES_DATA.items():
        disease, _ = Disease.objects.get_or_create(
            name=disease_name,
            defaults={'description': data['description']}
        )

        for symptom_name, weight in data['symptoms'].items():
            symptom, _ = Symptom.objects.get_or_create(name=symptom_name)
            DiseaseSymptom.objects.get_or_create(
                disease=disease,
                symptom=symptom,
                defaults={'weight': weight}
            )

        for treatment_desc in data['treatments']:
            Treatment.objects.get_or_create(
                disease=disease,
                description=treatment_desc
            )

class Migration(migrations.Migration):

    dependencies = [
        ('expert_system_app', '0004_update_disease_data'),
    ]

    operations = [
        migrations.RunPython(populate_new_data),
    ]