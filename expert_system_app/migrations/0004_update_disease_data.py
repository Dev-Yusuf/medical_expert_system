# Generated by Django 5.0.2 on 2025-07-07 17:19

from django.db import migrations


UPDATED_DISEASES_DATA = {
    "Malaria": {
        "symptoms": {
            "Sweating": 8,
            "Body aches": 7,
            "Nausea": 6
        },
        "treatments": [
            "Ensure patient completes the full course of antimalarial medication."
        ]
    },
    "Typhoid Fever": {
        "symptoms": {
            "Loss of appetite": 8,
            "Enlarged spleen or liver": 7,
            "Dry cough": 6
        },
        "treatments": [
            "Vaccination is recommended for prevention in high-risk areas."
        ]
    },
    "Stomach Ulcer": {
        "symptoms": {
            "Feeling of fullness": 7,
            "Intolerance to fatty foods": 6,
            "Unexplained weight loss": 5
        },
        "treatments": [
            "If caused by H. pylori, antibiotics are necessary."
        ]
    },
    "Diarrhea": {
        "symptoms": {
            "Urgent need to have a bowel movement": 8,
            "Dehydration": 9,
            "Light-headedness": 7
        },
        "treatments": [
            "Probiotics may help restore a healthy gut biome."
        ]
    },
    "Yellow Fever": {
        "symptoms": {
            "Back pain": 8,
            "Delirium": 7,
            "Seizures": 6
        },
        "treatments": [
            "Vaccination is the most important preventive measure."
        ]
    }
}

def update_disease_data(apps, schema_editor):
    Symptom = apps.get_model('expert_system_app', 'Symptom')
    Disease = apps.get_model('expert_system_app', 'Disease')
    DiseaseSymptom = apps.get_model('expert_system_app', 'DiseaseSymptom')
    Treatment = apps.get_model('expert_system_app', 'Treatment')

    for disease_name, data in UPDATED_DISEASES_DATA.items():
        try:
            disease = Disease.objects.get(name=disease_name)

            for symptom_name, weight in data['symptoms'].items():
                symptom, _ = Symptom.objects.get_or_create(name=symptom_name)
                DiseaseSymptom.objects.get_or_create(
                    disease=disease,
                    symptom=symptom,
                    defaults={'weight': weight}
                )

            for treatment_desc in data['treatments']:
                Treatment.objects.get_or_create(
                    disease=disease,
                    description=treatment_desc
                )
        except Disease.DoesNotExist:
            # In case the disease from the initial migration doesn't exist for some reason
            pass

class Migration(migrations.Migration):

    dependencies = [
        ('expert_system_app', '0003_populate_initial_data'),
    ]

    operations = [
        migrations.RunPython(update_disease_data),
    ]



